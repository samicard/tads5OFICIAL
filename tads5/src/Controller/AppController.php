<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Datasource\ConnectionManager;
use Cake\Event\EventInterface;
use Cake\Http\Exception\UnauthorizedException;
use Cake\Mailer\Mailer;
use Cake\ORM\TableRegistry;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/5/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        if (empty($this->buscaToken()) AND ($this->request->getParam('action') != 'logar' AND $this->request->getParam('action') != 'adicionaruser')) {
            throw new UnauthorizedException();
        }
    }

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();

        $this->loadComponent('Flash');

        /*
         * Enable the following component for recommended CakePHP form protection settings.
         * see https://book.cakephp.org/5/en/controllers/components/form-protection.html
         */
        //$this->loadComponent('FormProtection');
        $this->Users = TableRegistry::getTableLocator()->get('Users');
        $this->Autenticacaos = TableRegistry::getTableLocator()->get('Autenticacaos');
        $this->Servicos = TableRegistry::getTableLocator()->get('Servicos');
        $this->Fornecedors = TableRegistry::getTableLocator()->get('Fornecedors');
        $this->Pecas = TableRegistry::getTableLocator()->get('Pecas');
        $this->Fabricantes = TableRegistry::getTableLocator()->get('Fabricantes');
        $this->Tipos = TableRegistry::getTableLocator()->get('Tipos');
        $this->Veiculos = TableRegistry::getTableLocator()->get('Veiculos');
        $this->Manutencaos = TableRegistry::getTableLocator()->get('Manutencaos');
        $this->Manupecas = TableRegistry::getTableLocator()->get('Manupecas');

        $GLOBALS['connection'] = ConnectionManager::get('default');
        //$GLOBALS['token'] = '7Wujj7SJt1ywjLhkgWbxnYRGSSGuTZFsILD1BYPbCivhknOYcK';
    }

    protected function buscaToken() {
        $resultado = null;
        if (!empty($this->request->getHeader('Autenticacao')[0])) {
            $token = $this->request->getHeader('Autenticacao')[0];
            $sql = 'SELECT * FROM autenticacaos WHERE hash = :token AND expira >= :dtAtual LIMIT 1';
            $resultado = $GLOBALS['connection']->execute($sql,
                ['token' => $token, 'dtAtual' => date('Y-m-d')])
                ->fetch('assoc');
        }

        return $resultado;
    }

    protected function sendMail($emailTo, $emailSubject, $emailDeliver) {
        $mailer = new Mailer();
        $mailer->setEmailFormat('html')
            ->setFrom([env('EMAIL_TRANSPORT_USERNAME') => 'TADS 5'])
            ->setTo($emailTo)
            ->setSubject($emailSubject)
            ->deliver($emailDeliver);
    }
}
